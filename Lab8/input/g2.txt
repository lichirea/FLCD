N = { program variable_declaration sign non_sero_digit digit letter character string cmpd_stmt type stmt vector_declaration ifstmt forstmt iostmt assignstmt readstmt writestmt expression term factor condition relation int_number IDENTIFIER type}
E = { int char string for if vector variable go stop display input else + - * / =:= < <= <=>  >= ^ ==> > ( ) : " " [ ] /n and in range 1 2 3 4 5 6 7 8 9 0 A B C D E F G H I J K L M N O P Q R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x y z}
S = program
P = {
    program -> go cmpd_stmt stop
    program -> epsilon
    relation -> < | <= | <=> | <> | >= | > | =:= | ==>
    stmt -> variable_declaration | vector_declaration | ifstmt | forstmt | iostmt | assignstmt
    cmpd_stmt -> stmt /n [cmpd_stmt]
    type -> char | int | string
    readstmt -> IDENTIFIER <=> input ( string )
	writestmt -> display ( IDENTIFIER )
	iostmt -> readstmt | writestmt
    expression -> expression (+ | -) term | term
	term -> term (* | /) factor | factor
	factor -> ( expression ) | IDENTIFIER | int_number
	digit -> 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7| 8 | 9
	letter->A | B | C | D | E | F| G| H| I| J| K| L| M| N| O| P| Q |R |S |T |U |V |W |X |Y |Z| a |b |c |d |e |f |g |h |i |j |k |l |m |n |o |p |q |r |s |t| u| v| w| x| y| z
	non_zero_digit -> 1 | 2 | 3 | 4 | 5 | 6 | 7| 8 | 9
    sign -> + | -
    int_number -> [sign] non_zero_digit {digit} | 0
	IDENTIFIER -> letter | {digit}letter{letter}{digit}
	condition -> expression relation expression
	ifstmt -> if condition : cmpd_stmt [else : cmpd_stmt]
	forstmt -> for IDENTIFIER in range ( IDENTIFIER , IDENTIFIER ) :
	assignstmt -> IDENTIFIER <=> expression
	variable_declaration -> variable IDENTIFIER ^ type
	vector_declaration -> vector IDENTIFIER [ int_number ] ==> type
	character -> letter | digit
    string -> character{character}

}